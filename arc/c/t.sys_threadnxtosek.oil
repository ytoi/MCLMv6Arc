.//============================================================================
.assign task_num = 1;
.select any tm_thread from instances of TM_THREAD
.if ( not (empty tm_thread) )
  .assign task_num = tm_thread.number_of_threads
.end if
.assign default_stack_size = 512
.assign default_task_priority = "1"
.assign main_task_priority = "15"
.assign main_task_stack_size = default_stack_size
.select any tm_thread_element from instances of TM_THREAD_ELEMENT where ( selected.thread_no == 0 )
.if ( not_empty tm_thread )
  .if ( tm_thread_element.priority != "" )
    .assign main_task_priority = tm_thread_element.priority
  .end if
  .if ( tm_thread_element.stack_size > 0 )
    .assign main_task_stack_size = tm_thread_element.stack_size
  .end if
.end if
.//
.//--------------------------------------------------------------------
.//
.// OSEK oil file creation
.//
.//--------------------------------------------------------------------
/**
 ******************************************************************************
 ** nxtosek.oil
 ** this is auto generated file.
 **
 ******************************************************************************
 **/
#include "implementation.oil"

CPU ATMEL_AT91SAM7S256
{
  OS LEJOS_OSEK /* nxtOSEK */
  {
    STATUS = EXTENDED;
    STARTUPHOOK = FALSE;
    ERRORHOOK = FALSE;
    SHUTDOWNHOOK = FALSE;
    PRETASKHOOK = FALSE;
    POSTTASKHOOK = FALSE;
    USEGETSERVICEID = FALSE;
    USEPARAMETERACCESS = FALSE;
    USERESSCHEDULER = FALSE;
  };

  APPMODE appmode1{};

  /* Resources(Mutex) */
  RESOURCE rIQueue
  {
    RESOURCEPROPERTY = STANDARD;
  };

  RESOURCE rSQueue
  {
    RESOURCEPROPERTY = STANDARD;

  };

  RESOURCE rFreeList
  {
    RESOURCEPROPERTY = STANDARD;

  };

  RESOURCE rNonBusy
  {
    RESOURCEPROPERTY = STANDARD;

  };

  RESOURCE rInstance
  {
    RESOURCEPROPERTY = STANDARD;

  };

  RESOURCE rTimer
  {
    RESOURCEPROPERTY = STANDARD;

  };

  RESOURCE rILib
  {
    RESOURCEPROPERTY = STANDARD;
  };


  /* Events */
  EVENT eExternalEvent
  {
    MASK = AUTO;
  };


  // Task

  /* Drive Control Task(Main) */
  TASK tMainTask
  {
    AUTOSTART = TRUE
    {
      APPMODE = appmode1;
    };

    PRIORITY = ${main_task_priority};
    ACTIVATION = 1;
    SCHEDULE = FULL;
    STACKSIZE = ${main_task_stack_size}; /* bytes */
    RESOURCE = rIQueue;
    RESOURCE = rSQueue;
    RESOURCE = rFreeList;
    RESOURCE = rNonBusy;
    RESOURCE = rInstance;
.if ( te_sys.MaxTimers > 0 )
    RESOURCE = rTimer;
.end if
    RESOURCE = rILib;
    EVENT    = eExternalEvent;
  };

  /* Definition of OSEK Alarm counter: SysTimerCnt */
  COUNTER SysTimerCnt
  {
    MINCYCLE = 1;
    MAXALLOWEDVALUE = 100000000;
    TICKSPERBASE = 1;
  };


  ALARM xtUMLAlarm
  {
    COUNTER = SysTimerCnt;
    ACTION = ALARMCALLBACK {
      ALARMCALLBACKNAME = "TIM_tick";
    };
    AUTOSTART = FALSE;
  };

.if ( task_num > 1 )
  .assign i = 1;
  .while ( i < task_num )
    .assign stack_size = default_stack_size
    .assign task_priority = default_task_priority
    .select any tm_thread_element from instances of TM_THREAD_ELEMENT where selected.thread_no == i
    .if ( not_empty tm_thread_element )
      .if ( tm_thread_element.priority != "" )
        .assign task_priority = tm_thread_element.priority
      .end if
      .if ( tm_thread_element.stack_size > 0 )
        .assign task_stack_size = tm_thread_element.stack_size
      .end if
    .end if
TASK tTask${i}
{
   AUTOSTART = FALSE;

   PRIORITY = ${task_priority};
   ACTIVATION = 1;
   SCHEDULE = FULL;
   STACKSIZE = ${stack_size}; /* bytes */
   RESOURCE = rIQueue;
   RESOURCE = rSQueue;
   RESOURCE = rFreeList;
   RESOURCE = rNonBusy;
   RESOURCE = rInstance;
   .if ( te_sys.MaxTimers > 0 )
   RESOURCE = rTimer;
   .end if
   RESOURCE = rILib;
   EVENT    = eExternalEvent;
   };
    .assign i = i + 1
    .end while
.end if
};
.//
