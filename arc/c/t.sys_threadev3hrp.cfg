.//============================================================================
.assign task_num = 1;
.select any tm_thread from instances of TM_THREAD
.if ( not (empty tm_thread) )
  .assign task_num = tm_thread.number_of_threads
.end if
.assign default_stack_size = 4096
.assign default_task_priority = "1"
.assign main_task_priority = "0"
.assign main_task_stack_size = default_stack_size
.select any tm_thread_element from instances of TM_THREAD_ELEMENT where ( selected.thread_no == 0 )
.if ( not_empty tm_thread )
  .if ( tm_thread_element.priority != "" )
    .assign main_task_priority = tm_thread_element.priority
  .end if
  .if ( tm_thread_element.stack_size > 0 )
    .assign main_task_stack_size = tm_thread_element.stack_size
  .end if
.end if
.//
.//--------------------------------------------------------------------
.//
.// HRP Cfg file creation
.//
.//--------------------------------------------------------------------
/**
 ******************************************************************************
 ** app.cfg
 ** this is auto generated file.
 **
 ******************************************************************************
 **/
INCLUDE("app_common.cfg");

#include "app.h"


DOMAIN(TDOM_APP) {
CRE_TSK(tMainTask, {TA_ACT,0,main_task,TMIN_APP_TPRI+${main_task_priority},${main_task_stack_size},NULL});
CRE_SEM(semWakeTaskMain,{TA_TPRI,0,1});


.if ( task_num > 1 )
  .assign i = 1;
  .while ( i < task_num )
    .assign stack_size = default_stack_size
    .assign task_priority = default_task_priority
    .select any tm_thread_element from instances of TM_THREAD_ELEMENT where ( selected.thread_no == i )
    .if ( empty tm_thread_element )
      .print "Warning: Task ${i} is not set priority"
    .else
      .if ( tm_thread_element.priority != "" )
        .assign task_priority = tm_thread_element.priority
      .end if
      .if ( tm_thread_element.stack_size > 0 )
        .assign task_stack_size = tm_thread_element.stack_size
      .end if
    .end if
CRE_TSK(tTask${i}, {TA_NULL,0,task${i}_start,TMIN_APP_TPRI+${task_priority},${stack_size},NULL});
CRE_SEM(semWakeTask${i},{TA_TPRI,0,1});

    .assign i = i + 1;
    .end while
.end if
.// Mutexes
CRE_SEM(mtxSQueue,{TA_TPRI,1,1});
CRE_SEM(mtxIQueue,{TA_TPRI,1,1});
CRE_SEM(mtxFreeList,{TA_TPRI,1,1});
CRE_SEM(mtxNonBusy,{TA_TPRI,1,1});
CRE_SEM(mtxInstance,{TA_TPRI,1,1});
CRE_SEM(mtxTimer,{TA_TPRI,1,1});
CRE_SEM(mtxILib,{TA_TPRI,1,1});

.if ( te_sys.MaxTimers > 0 )
/* 1msec timer handler */
CRE_CYC(xtUMLAlarm,{TA_NULL,{TNFY_ACTTSK,xtUMLCycTask},1000U,0U});
CRE_TSK(xtUMLCycTask, { TA_NULL, 0, cyclic_handler, TMIN_APP_TPRI, STACK_SIZE, NULL });
.end if
}





.//
